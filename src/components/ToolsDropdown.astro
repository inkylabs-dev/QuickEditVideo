---
// Reusable tools dropdown component
---

<script>
// Shared dropdown functionality
function initDropdown(triggerId, menuId, arrowId) {
	const trigger = document.getElementById(triggerId);
	const menu = document.getElementById(menuId);
	const arrow = document.getElementById(arrowId);
	
	if (!trigger || !menu || !arrow) return;
	
	let isOpen = false;

	function toggle() {
		isOpen = !isOpen;
		menu.classList.toggle('opacity-0', !isOpen);
		menu.classList.toggle('invisible', !isOpen);
		menu.classList.toggle('scale-95', !isOpen);
		menu.classList.toggle('opacity-100', isOpen);
		menu.classList.toggle('visible', isOpen);
		menu.classList.toggle('scale-100', isOpen);
		arrow.style.transform = `rotate(${isOpen ? 180 : 0}deg)`;
	}

	function close() {
		if (isOpen) {
			isOpen = false;
			menu.classList.add('opacity-0', 'invisible', 'scale-95');
			menu.classList.remove('opacity-100', 'visible', 'scale-100');
			arrow.style.transform = 'rotate(0deg)';
		}
	}

	trigger.addEventListener('click', e => {
		e.stopPropagation();
		toggle();
	});

	document.addEventListener('click', e => {
		if (!trigger.contains(e.target) && !menu.contains(e.target)) {
			close();
		}
	});

	document.addEventListener('keydown', e => {
		if (e.key === 'Escape') close();
	});

	menu.addEventListener('keydown', e => {
		const links = menu.querySelectorAll('a');
		const current = Array.from(links).indexOf(document.activeElement);
		
		if (e.key === 'ArrowDown') {
			e.preventDefault();
			links[(current + 1) % links.length].focus();
		} else if (e.key === 'ArrowUp') {
			e.preventDefault();
			links[current <= 0 ? links.length - 1 : current - 1].focus();
		}
	});
}

// Auto-initialize on page load
document.addEventListener('DOMContentLoaded', () => {
	initDropdown('tools-dropdown-trigger', 'tools-dropdown-menu', 'dropdown-arrow');
});
</script>